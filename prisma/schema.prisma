generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Document {
  id                 Int                      @id @default(autoincrement())
  title              String
  slug               String                   @unique
  canonical_url      String?
  content            String
  plain_text_content String
  custom_excerpt     String?
  created_at         DateTime?                @default(now())
  updated_at         DateTime?                @default(now())
  publication_date   DateTime?
  status             String?                  @default("draft")
  meta_title         String?
  meta_description   String?
  work_id            Int
  user_id            Int
  document_tag       DocumentTag[]
  version_history    DocumentVersionHistory[]
  user               User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  work               Work                     @relation(fields: [work_id], references: [id], onDelete: Cascade)
  link               Link[]

  @@map("documents")
}

model DocumentTag {
  id          Int       @id @default(autoincrement())
  document_id Int?
  tag_id      Int?
  owner_id    Int?
  tag         Tag?      @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  document    Document? @relation(fields: [document_id], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@unique([document_id, tag_id])
  @@map("document_tag")
}

model DocumentVersionHistory {
  id               Int       @id @default(autoincrement())
  content_snapshot String
  document_id      Int
  created_at       DateTime? @default(now())
  document         Document  @relation(fields: [document_id], references: [id])

  @@map("document_versions")
}

model Link {
  id          Int       @id @default(autoincrement())
  to_user     String
  document_id Int
  token       String    @unique @default(uuid())
  can_edit    Boolean?  @default(false)
  can_comment Boolean?  @default(false)
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  document    Document  @relation(fields: [document_id], references: [id])

  @@map("links")
}

model Logs {
  id         Int       @id @default(autoincrement())
  log_data   String
  created_at DateTime? @default(now())

  @@map("logs")
}

model Work {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  is_paid       Boolean?       @default(false)
  created_at    DateTime?      @default(now())
  updated_at    DateTime?      @default(now())
  user_id       Int?
  slug          String         @unique
  documents     Document[]
  subscriptions Subscription[]
  user          User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("works")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Subscription {
  id                  Int         @id @default(autoincrement())
  subscriber_id       Int?
  work_id             Int?
  subscription_status String?     @default("subscribed")
  subscribed_at       DateTime?   @default(now())
  unsubscribed_at     DateTime?
  subscriber          Subscriber? @relation(fields: [subscriber_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  work                Work?       @relation(fields: [work_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([subscriber_id, work_id])
  @@map("subscriptions")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
}

model Subscriber {
  id                   Int            @id @default(autoincrement())
  email_verified       String         @unique
  created_at           DateTime?      @default(now())
  updated_at           DateTime?      @default(now())
  is_verified          Boolean?       @default(false)
  salt                 String?
  verification_token   String?
  verification_expires DateTime?
  subscriptions        Subscription[]

  @@map("subscribers")
}

model Tag {
  id           Int           @id @default(autoincrement())
  tag_name     String        @unique
  created_at   DateTime?     @default(now())
  updated_at   DateTime?     @default(now())
  tag_user     TagUser[]
  document_tag DocumentTag[]

  @@map("tags")
}

model TagUser {
  id      Int   @id @default(autoincrement())
  user_id Int?
  tag_id  Int?
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tag     Tag?  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([user_id, tag_id])
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  display_name  String?       @unique
  email         String        @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  created_at    DateTime?     @default(now())
  updated_at    DateTime?     @default(now())
  tag_user      TagUser[]
  accounts      Account[]
  document_tag  DocumentTag[]
  document      Document[]
  sessions      Session[]
  work          Work[]

  @@map("users")
}

model verificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}
